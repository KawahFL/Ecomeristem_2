/**
 * @file ecomeristem/plant/thermal-time/Model.hpp
 * @author The Ecomeristem Development Team
 * See the AUTHORS or Authors.txt file
 */

/*
 * Copyright (C) 2005-2017 Cirad http://www.cirad.fr
 * Copyright (C) 2012-2017 ULCO http://www.univ-littoral.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <defines.hpp>

namespace model {

class ThermalTimeModel : public CoupledModel < ThermalTimeModel >
{
public:
    enum states { INIT, DEAD, STOCK_AVAILABLE, NO_STOCK };

    enum internals { DD, DELTA_T, EDD, IH, LIGULO_VISU, PHENO_STAGE,
                     PLASTO_VISU, TT, TT_LIG, BOOL_CROSSED_PLASTO };
    enum externals { STOCK, PHASE, TA, GROW, LIG, PLASTO_DELAY };
    
    enum phase_t { INIT = 0,
                   INITIAL = 1,
                   GROWTH = 2,
                   NOGROWTH = 3,
                   NEW_PHYTOMER = 5,
                   NOGROWTH2 = 18,
                   NOGROWTH3 = 19,
                   NOGROWTH4 = 20,
                   NEW_PHYTOMER3 = 23,
                   LIG = 24,
                   KILL = 25 };


    ThermalTimeModel() {}

    virtual ~ThermalTimeModel()
    { }

    void init(double t, const ecomeristem::ModelParameters& parameters) {
        _Tb = parameters.get < double >("Tb");
        _plasto = parameters.get < double >("plasto_init");
    }

    void compute(double t, bool /* update */) {
        _deltaT = _Ta - _Tb;
        _TT = _TT + _deltaT;
        state_update();
    }

    void state_update() {
        states old_state;

        do {
            old_state = _state;

            switch (_state) {
            case INIT: {
                _state = STOCK_AVAILABLE;
                break;
            }
            case DEAD: {
                break;
            }
            case STOCK_AVAILABLE: {
                // if (_stock <= 0){
                if (_phase == NOGROWTH or _phase == NOGROWTH3 or
                    _phase == NOGROWTH4) {
                    _state = NO_STOCK;
                }
                break;
            }
            case NO_STOCK: {
                // if (_stock > 0){
                if (_phase == GROWTH or _phase == NEW_PHYTOMER3){
                    _state = STOCK_AVAILABLE;
                }
                // TODO: => dead
                break;
            }
            };
        } while (old_state != _state);
    }

//    paramaters variables
    double _Tb;
    double _plasto;
    phase_t _phase;

//    computed variables
    states _state;

    double _deltaT;
    double _TT;


//    external variables
    double _Ta;

//    double _stock;
//    double _phase;
//    double _grow;
//    double _lig;
//    double _plasto_delay;


//private:
//// external variables
//    double _stock;
//    double _phase;
//    double _Ta;
//    double _grow;
//    double _lig;
//    double _plasto_delay;

//    // external variables
////        double _etp;
////        double _p;
////        double _radiation;
////        double _ta;
////        double _water_supply;


};

} // namespace model
